# syntax=docker-registry.wikimedia.org/repos/releng/blubber/buildkit:v0.22.0
version: v4

base: docker-registry.wikimedia.org/python3-bookworm:latest

runs:
  environment:
    PYTHONBUFFERED: "1"
    PYTHONDONTWRITEBYTECODE: "1"
    PIP_NO_CACHE_DIR: "off"
    PIP_DISABLE_PIP_VERSION_CHECK: "on"
    DJANGO_SETTINGS_MODULE: "striker.settings"

variants:
  base-python:
    apt:
      packages:
        - build-essential
        - default-libmysqlclient-dev
        - gettext
        - git
        - libldap2-dev
        - libsasl2-dev
        - pkgconf
        - python3-dev
        - python3-pip
    python:
      version: python3
      poetry:
        version: ==1.7.1
      requirements:
        - pyproject.toml
        - poetry.lock

  dev-python:
    includes:
      - base-python
    runs:
      insecurely: true
    python:
      poetry:
        devel: true
    copies:
      - from: local
        source: .
        destination: .

  test-python:
    # CI container: runs tox checks on Python code
    includes:
      - base-python
    runs:
      insecurely: true
    copies:
      - from: local
        source: .
        destination: .
    entrypoint:
      - /bin/bash
      - -c
      - >-
        set -eux;
        export -n PYTHONPATH PIP_FIND_LINKS PIP_WHEEL_DIR PIP_NO_INDEX;
        tox

  local-python:
    # Local development Python runtime container including special support for
    # use with docker-compose.
    includes:
      - dev-python
    copies:
      - from: dockerize
        source: /srv/dockerize
        destination: /srv/dockerize

  dockerize:
    # Bulder container: downloads and unpacks the dockerize utility from
    # <https://github.com/jwilder/dockerize> to /srv/dockerize
    runs:
      environment:
        DOCKERIZE_VERSION: v0.6.1
    lives:
      in: /srv/dockerize/bin
    apt:
      packages:
        - ca-certificates
        - wget
    builder:
      command:
        - /bin/bash
        - -c
        - >-
          wget --no-verbose https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          && tar -C /srv/dockerize/bin -xzvf dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          && rm dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz

  prep:
    # Builder container: compiles Django static assets
    includes:
      - base-python
    runs:
      environment:
        DJANGO_SECRET_KEY: NOT_REALLY_A_SECRET_IN_PREP_BUILD
        OAUTH_CONSUMER_KEY: DUMMY_VALUE_FOR_PREP_BUILD
        OAUTH_CONSUMER_SECRET: DUMMY_VALUE_FOR_PREP_BUILD
        PHABRICATOR_TOKEN: DUMMY_VALUE_FOR_PREP_BUILD
        WIKITECH_CONSUMER_TOKEN: DUMMY_VALUE_FOR_PREP_BUILD
        WIKITECH_CONSUMER_SECRET: DUMMY_VALUE_FOR_PREP_BUILD
        WIKITECH_ACCESS_TOKEN: DUMMY_VALUE_FOR_PREP_BUILD
        WIKITECH_ACCESS_SECRET: DUMMY_VALUE_FOR_PREP_BUILD
        OPENSTACK_PASSWORD: DUMMY_VALUE_FOR_PREP_BUILD
        GITLAB_ACCESS_TOKEN: DUMMY_VALUE_FOR_PREP_BUILD
    builder:
      requirements:
        - from: local
          source: .
          destination: .
      command:
        - /bin/bash
        - -c
        - >-
          set -eux;
          ls -alh
          && (poetry run python3 manage.py collectstatic -c --no-input --ignore src --ignore tests --ignore *.json --ignore Gruntfile.js
          && cd /srv/app/staticfiles
          && python3 -mjson.tool staticfiles.json > staticfiles.json.pretty
          && mv staticfiles.json.pretty staticfiles.json)

  production:
    includes:
      - base-python
    copies:
      - from: prep
        source: /srv/app
        destination: .
      - from: local
        source: ./etc/ldap
        destination: /etc/ldap/
    entrypoint:
      - poetry
      - run
      - python3
      - manage.py
      - runserver
      - --noreload
      - --nostatic
      # the following is set as an argument:
      # - 127.0.0.1:8080
